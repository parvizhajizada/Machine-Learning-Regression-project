House Sales Price prediction
========================================================
author: Parviz Hajizada
date: May 22th, 2019
autosize: true

Introduction
========================================================

- Source: Kaggle
- Data: House Sales in King County, USA
- Target variable: Price

Exploratory Data Analysis
========================================================

```{r message=FALSE, warning=FALSE, echo = FALSE}
library(readr)
library(dplyr)
library(tibble)
library(corrplot)
library(ggplot2)
library(AER)
library(lmtest)
library(nnet)
library(MASS)
library(caret)
library(verification)
library(e1071)
library(janitor)
library(class)
library(kernlab)
library(verification)
library(tidyverse)
library(gmodels)
library(vcd)
library(lubridate)
library(gridExtra)
library(devtools)
library(maps)
library(mapdata)
library(ggmap)
```

```{r warning = FALSE, message = FALSE, echo = FALSE}
house <- read_csv("kc_house_data.csv")

house <- house %>% mutate(year = year(date),     
                          # year at which the house is sold
                          month = month(date),   
                          # month at which the house is sold
                          age = year - yr_built, 
                          # time interval between year build 
                          # and year sold (i.e. age of house)
                          renovated = factor(ifelse(yr_renovated != 0, 1,0))) # 1 if the house                            is renovated, 0 if it is not

house$yr_renovated <- NULL 
house$year <- NULL
house$id <- NULL
house$date <- NULL

house <- house %>% filter(bedrooms !=0, bedrooms !=33) 
house$bedrooms[house$bedrooms > 7] <- 7
house$bedrooms <- factor(house$bedrooms)
levels(house$bedrooms)[7] <- "6+"

house <- house %>% filter(bathrooms !=0, bathrooms !=0.5,
                          bathrooms !=0.75, bathrooms !=1.25) 
house$bathrooms[house$bathrooms > 3.75] <- 3.75
house$bathrooms <- factor(house$bathrooms)
levels(house$bathrooms)[11] <- "3.5+"

house <- house %>% filter(floors !=3.5) 
house$floors[house$floors > 2.5] <- 2.5
house$floors <- factor(house$floors)
levels(house$floors)[4] <- "2+"

house$grade[house$grade > 12] <- 12
house$grade <- factor(house$grade)
levels(house$grade)[9] <- "11+"

house$condition[house$condition < 2] <- 2
house$condition <- factor(house$condition)
levels(house$condition)[1] <- "3-"

house <- house %>% filter(age !=-1)

house$yr_built <- NULL

vars_factor <- c("waterfront", "view", "zipcode", "month")
house[vars_factor] <- lapply(house[vars_factor], factor)
```

- No missing value
- Both numerical and categorical features

Exploratory Data Analysis - Correlation
========================================================

```{r message = FALSE, warning = FALSE, echo = FALSE}
# Drop highly correlated columns
M <- cor(house[,c("price", "sqft_living", "sqft_lot", 
                  "sqft_basement", "age", 
                  "sqft_above", "sqft_living15", "sqft_lot15")])
corrplot.mixed(M) 
```

Feature Engineering
========================================================

We have a year_renovated column indicating when the house has been renovated if ever, but 96% of houses have never been renovated, so we creature a dummy variable to show if a house has ever been renovated and drop the year_renovated column.

We have another column called year which depicts the year at which the house is sold but we drop it because the dataset covers only 2 years which is too little and also if we included the year then we could make only in-sample prediction. Instead we will use month column which would account for seasonal price change.

Data preprocessing
========================================================
- Bedrooms column

Number of houses with 7 or more bedrooms are quite little such that we will aggregate them under 6+ bedrooms level.

- Bathrooms column

Number of houses with 3.75 or more bathrooms will be aggregated under 3.5+ level.

- Floors column

Number of houses with 2.5 or more floors will be aggregated under 2+ level.

etc...


Back to Exploratory Data Analysis
========================================================

```{r warning = FALSE, message = FALSE, echo = FALSE}
set.seed(1)
which_train <- createDataPartition(house$price, 
                                   p = 0.8, 
                                   list = FALSE) 

train <- house[which_train,]
test <- house[-which_train,]
```

```{r echo=FALSE, warning = FALSE, message = FALSE}
p1 <- ggplot(train, aes(x=sqft_living, y=price)) + 
  geom_point()+
  geom_smooth()

p2 <- ggplot(train, aes(x=sqft_lot, y=price)) + 
  geom_point()+
  geom_smooth()

p3 <- ggplot(train, aes(x=sqft_basement, y=price)) + 
  geom_point()+
  geom_smooth()

grid.arrange(p1, p2, p3, ncol = 3)
```

Back to Exploratory Data Analysis 2
========================================================

```{r echo=FALSE}
p4 <- ggplot(data=train, aes(x=bedrooms, y=price)) +
  geom_bar(stat="identity")

p5 <- ggplot(data=train, aes(x=bathrooms, y=price)) +
  geom_bar(stat="identity")

p6 <- ggplot(data=train, aes(x=floors, y=price)) +
  geom_bar(stat="identity")

p7 <- ggplot(data=train, aes(x=waterfront, y=price)) +
  geom_bar(stat="identity")

p8 <- ggplot(data=train, aes(x=view, y=price)) +
  geom_bar(stat="identity")

p9 <- ggplot(data=train, aes(x=condition, y=price)) +
  geom_bar(stat="identity")

p10 <- ggplot(data=train, aes(x=grade, y=price)) +
  geom_bar(stat="identity")

p11 <- ggplot(data=train, aes(x=month, y=price)) +
  geom_bar(stat="identity")

p12 <- ggplot(data=train, aes(x=renovated, y=price)) +
  geom_bar(stat="identity")

grid.arrange(p4, p5, p6 ,p7 ,p8,
             p9 ,p10 ,p11, p12,
             nrow = 3, ncol=3)
```

Map of King County
========================================================

```{r echo=FALSE}
states <- map_data("state")
ca_df <- subset(states, region == "washington")
counties <- map_data("county")
ca_county <- subset(counties, region == "washington")
king_county <- subset(ca_county, subregion == "king")
ca_base <- ggplot(data = king_county, mapping = aes(x = long, y = lat, group = group)) + 
  geom_polygon(color = "black", fill = "gray")
ca_base
```

Heat map of price in King County 
========================================================

```{r echo=FALSE}
b <- ggplot(house, aes(x = long, y = lat))+
  geom_point(aes(color = price)) +
  scale_color_gradientn(colours = rainbow(5)) +
  theme(legend.position = "right")
b
```

Mean Price against Renovated
========================================================

```{r echo=FALSE}
avg_price_ren <- house %>% group_by(renovated) %>% summarize(average_price = mean(price))
ggplot(avg_price_ren, aes(x = renovated, y = average_price, fill = renovated)) + 
  geom_bar(stat = "identity") +
  ggtitle("Mean price VS renovated")
```

Mean Price against View
========================================================

```{r echo=FALSE}
avg_price_view <- house %>% group_by(view) %>% summarize(average_price = mean(price))
ggplot(avg_price_view, aes(x = view, y = average_price, fill = view)) + 
  geom_bar(stat = "identity") +
  ggtitle("Mean price VS view")
```

List of models used
========================================================

```{r warning = FALSE, message = FALSE, echo = FALSE}
set.seed(1)

formula <- price ~ bedrooms + bathrooms + sqft_living +
  sqft_lot + floors + waterfront + view + condition + 
  grade + sqft_basement + zipcode +
  month + renovated

linear.train <- 
  train(formula, 
        data = train, 
        method = "lm")

linear.train_forecasts <- predict(linear.train, test)

error_measure.lm <- postResample(pred = linear.train_forecasts, obs = test$price)


parametersC <- data.frame(C = c(0.01, 0.1, 0.2, 0.5, 1, 5))

set.seed(1)
svm_Linear <- train(formula, 
                    data = train, 
                    method = "svmLinear",
                    tuneGrid = parametersC)

svm_linear.train_forecasts <- predict(svm_Linear, test)

error_measure.svm_linear <- postResample(pred = svm_linear.train_forecasts, obs = test$price)


parametersC_sigma <- 
  expand.grid(C = c(0.01, 0.05, 0.1, 0.5, 1, 5),
              sigma = c(0.05, 0.1, 0.2, 0.5, 1))
              
set.seed(1)
svm_radial <- train(formula, 
                    data = train, 
                    method = "svmRadial",
                    tuneGrid = parametersC_sigma)

svm_radial.train_forecasts <- predict(svm_radial, test)

error_measure.svm_radial <- postResample(pred = svm_radial.train_forecasts, obs = test$price)


set.seed(1)
treebag.train <- train(formula, 
                       data = train, 
                       method = "treebag")

treebag.train_forecasts <- predict(treebag.train, test)

error_measure.treebag <- postResample(pred = treebag.train_forecasts, obs = test$price)


set.seed(1)
bayesglm.train <- train(formula, 
                        data = train, 
                        method = "bayesglm")

bayesglm.train_forecasts <- predict(bayesglm.train, test)

error_measure.bayes_glm <-postResample(pred = bayesglm.train_forecasts, obs = test$price)


set.seed(1)

rpart1SE.train <- train(formula, 
                        data = train, 
                        method = "rpart1SE")

rpart1SE.train_forecasts <- predict(rpart1SE.train, test)

error_measure.cart <- postResample(pred = rpart1SE.train_forecasts, obs = test$price)
```

- Linear Regression
- Linear Support Vector Machines
- Radial Support Vector Machines
- Treebag
- Bayesian Generalized Linear Models
- Classification and Regression Trees

Conclusion
========================================================

```{r echo = FALSE, message = FALSE, warning = FALSE}
error_measures <- data.frame(error_measure.lm, error_measure.svm_linear,
                             error_measure.svm_radial, error_measure.treebag,
                             error_measure.bayes_glm, error_measure.cart)
names(error_measures) <- c("lm","svm_linear","svm_radial","treebag","bayesglm","cart")
error_measures
```